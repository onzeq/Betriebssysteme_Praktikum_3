
Prozesse:
    -1x Spooler
        -Warteschlange Größe 5
        -entnimmt Aufträge verteilt an Drucker 1,2 abwechselnd
        -beim senden an den Drucker:
        -wenn Drucker beschäftigt, wartet Spooler bis Drucker fertig


    -2x Drucker 
        -Nimmt Aufträge von Spooler
        -Druckt Aufträge
        -wartet auf nächsten Druckauftrag

    -1x Anwendungen
        -Generiert Druckaufträge (eigener Prozess) und stellt diese in Warteschlange bei Spooler
        -wenn Warteschlange voll, dann warten
        -jede Anwendung starten einen druckauftrag, danach wird der Prozess beendet
   

    Besonderheiten allgemein:
        -Zufallsgenerator ergibt Zeit zwischen 1 und 4 Sekunden für Druckauftrag Erzeugung
        -danach kommt es SOFORT zu einem druckauftrag
        -Zufallsgenerator erstellt Druckzeit zwischen 2 und 6 Sekunden


Pseudataode der Prozesse:
#########################################################
#define SPOOLER_SIZE  (5)  		#Groesse der Spoolerwarteschlange

#create semaphore spooler
semaphore ps_full(0);
semaphore ps_empty(SPOOLER_SIZE);
semaphore ps_mutex(1);

#create semaphore printer1
semaphore p1_full(0);
semaphore p1_empty(SPOOLER_SIZE);
semaphore p1_mutex(1);

#create semaphore printer2
semaphore p2_full(0);
semaphore p2_empty(SPOOLER_SIZE);
semaphore p2_mutex(1);


void spooler(){
    
    int data;		#angelegtes Dokument
    int alternate_count	
    while(true){

        //Lese warteschlange
        ps_full.wait(1);
        ps_mutex.wait(1);
        read_spooler_waitlist(&data);
        ps_mutex.signal(1);
        ps_empty.signal(1);

        //Verteile Druckauftrag
        if(alternate_count % 2 == 0)
        {
            p1_empty.wait(1);
            p1_mutex.wait(1);
            insert_data_printer_1_list(data);
            p1_mutex.signal(1);
            p1_full.signal(1);
        }
        else
        {
            p2_empty.wait(1);
            p2_mutex.wait(1);
            insert_data_printer_2_list(data);
            p2_mutex.signal(1);
            p2_full.signal(1);
        }
    }
}

#########################################################
#define PRINTER_WAIT (1)

semaphore p_full (0);
semaphore p_empty(1);
semaphore p_mutex(1);

void drucker(){
    int data;
    
    while(true){
        p_full.wait(1);
        p_mutex.wait(1);
        read_waitlist_printer(&Dokument);
        print_dataument(data);
        delay(2,6) #Druckauftrag zwischen 2 und 6 Minuten
        p_mutex.signal(1);
        p_empty.signal(1);

        
    }

}
#########################################################

#define SPOOLER_SIZE  (5)

semaphore app_full(0);
semaphore app_empty(1);
semaphore app_mutex(1);

void application(){
    int data;

    create_data(&data);

    app_empty.wait(1);
    app_mutex.wait(1);

    send_data_spooler();
    
    app_mutex.signal(1);
    app_full.signal(1);
}


