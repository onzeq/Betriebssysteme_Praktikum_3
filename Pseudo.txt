Allgemeine Funktion:
    Prozesse:
        -Druckerspooler (1)
            -besitzt eine warteschlange, größe 5
                -entnimmt aufträge aus dieser und verteilt diese abwechselnd an einen Drucker
            -beim senden an den Drucker:
                falls beschäftigt: warten bis laufender druckauftrag fertig ist, dann senden


        -Drucker (2)
            -nehmen Druckaufträge von Druckerspooler entgegen
            -Drucken diese
            -warten auf nächsten Druckaufträge

        -Anwendungen
            -stellen druckaufträge in die Warteschlange des Druckerspoolers
                -falls diese voll ist, wartet die Anwendung
            Besonderheiten:
                -jede Anwendung welche drucken will, besteht aus einem eigenen Prozess
                -jede Anwendung starten einen druckauftrag, danach wird der Prozess beendet

    Besonderheiten allgemein:
        -anwendungen starten sich zeitlich gleichverteilt von 0 bis 4 sekunden
            -danach kommt es SOFORT zu einem druckauftrag
        -das Drucken dauert zufällig verteilt 2 bis 6 Sekunden


Pseudocode der Prozesse:
#########################################################
#define SPOOLER_SIZE  (5)  		#Groesse der Spoolerwarteschlange

#create semaphore spooler
semaphore ds_full(0);
semaphore ds_empty(SPOOLER_SIZE);
semaphore ds_mutex(1);

#create semaphore printer1
semaphore p1_full(0);
semaphore p1_empty(SPOOLER_SIZE;
semaphore p1_mutex(1);

#create semaphore printer2
semaphore p2_full(0);
semaphore p2_empty(SPOOLER_SIZE);
semaphore p2_mutex(1);


void Druckerspooler(){
    
    int doc;		#angelegtes Dokument
    int alternate_count	
    while(true){
        ds_full.wait(1);
        ds_mutex.wait(1);
        read_spooler_waitlist(&doc);
        ds_mutex.signal(1);
        ds_empty.signal(1);

        
        if(alternate_count % 2 == 0)
        {
            p1_empty.wait(1);
            p1_mutex.wait(1);
            fuege_Dokument_in_Druckerliste1_ein(doc);
            p1_mutex.signal(1);
            p1_full.signal(1);
        }
        else
        {
            p2_empty.wait(1);
            p2_mutex.wait(1);
            fuege_Dokument_in_Druckerliste2_ein(Dokument);
            p2_mutex.signal(1);
            p2_full.signal(1);
        }
    }
}

#########################################################
#define PRINTER_WAIT (1)

semaphore p_full (0);
semaphore p_empty(LDWarte);
semaphore p_mutex(1);

void drucker(){
    int doc;
    
    while(true){
        p_full.wait(1);
        p_mutex.wait(1);
        read_waitlist_printer(&Dokument);
        print_document(doc);
        delay(2,6) #Druckauftrag zwischen 2 und 6 Minuten
        p_mutex.signal(1);
        p_empty.signal(1);

        
    }

}
#########################################################

#define SPOOLER_SIZE  (5)

semaphore ds_full(0);
semaphore ds_empty(LDSWarte);
semaphore ds_mutex(1);

void anwendung(){
    int doc;

    create_document(&doc);

    LDSleer.wait(1);
    LDSmutex.wait(1);

    send_data_spooler();
    
    LDSmutex.signal(1);
    LDSvoll.signal(1);
}


